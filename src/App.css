import { lazy, Suspense } from 'react';
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { HelmetProvider } from 'react-helmet-async';
import { LanguageProvider } from "@/contexts/LanguageContext";

// Lazy-loaded page components
const Index = lazy(() => import("./pages/Index"));
const About = lazy(() => import("./pages/About"));
const Contact = lazy(() => import("./pages/Contact"));
const ServicePage = lazy(() => import("./pages/ServicePage"));
const SaudiArabia = lazy(() => import("./pages/SaudiArabia"));
const UAE = lazy(() => import("./pages/UAE"));
const Kuwait = lazy(() => import("./pages/Kuwait"));
const Egypt = lazy(() => import("./pages/Egypt"));
const PrivacyPolicy = lazy(() => import("./pages/PrivacyPolicy"));
const TermsConditions = lazy(() => import("./pages/TermsConditions"));
const NotFound = lazy(() => import("./pages/NotFound"));
const CityPage = lazy(() => import("./pages/CityPage"));
const ServicesListPage = lazy(() => import("./pages/ServicesListPage"));
const GenericServicePage = lazy(() => import("./pages/GenericServicePage"));

const queryClient = new QueryClient();

// A simple loading fallback component
const LoadingFallback = () => (
  <div className="min-h-screen w-full flex items-center justify-center bg-blue-900">
    <div className="text-white text-xl">Loading...</div>
  </div>
);

// Data-driven route configuration
const routeConfig = [
  { path: "/", element: <Index /> },
  { path: "/about", element: <About /> },
  { path: "/contact", element: <Contact /> },
  { path: "/sa", element: <SaudiArabia /> },
  { path: "/ae", element: <UAE /> },
  { path: "/kw", element: <Kuwait /> },
  { path: "/eg", element: <Egypt /> },
  { path: "/services", element: <ServicesListPage /> },
  { path: "/services/:service", element: <GenericServicePage /> },
  { path: "/:country/:city", element: <CityPage /> },
  { path: "/privacy-policy", element: <PrivacyPolicy /> },
  { path: "/terms-conditions", element: <TermsConditions /> },
  { path: "/:country/:city/:service", element: <ServicePage /> },
  { path: "*", element: <NotFound /> },
];

const App = () => (
  <QueryClientProvider client={queryClient}>
    <HelmetProvider>
      <TooltipProvider>
        <LanguageProvider>
          <Toaster />
          <Sonner />
          <BrowserRouter>
            <Suspense fallback={<LoadingFallback />}>
              <Routes>
                {routeConfig.map((route, index) => (
                  <Route key={index} path={route.path} element={route.element} />
                ))}
              </Routes>
            </Suspense>
          </BrowserRouter>
        </LanguageProvider>
      </TooltipProvider>
    </HelmetProvider>
  </QueryClientProvider>
);

export default App;
